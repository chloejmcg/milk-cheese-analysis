glimpse(track_counts_df)
dim(track_counts_df)
# Check filenames
head(track_counts_df$sample_names)
# Fix sample names in track_reads
track_counts_df$sample_names <- sapply(strsplit(track_counts_df$sample_names, "_"), `[`, 1)
# Intuition check
head(track_counts_df$sample_names)
# What's different?
setdiff(track_counts_df$sample_names, metadata_df$sample_names)
# Let's do a filtering join with left_join
metadata_final_df <-
metadata_df %>%
left_join(., track_counts_df, by = "sample_names") %>%
# sample names to the rownames to merge into phyloseq
column_to_rownames(var = "sample_names")
# load in metadata
metadata_df <-
read_csv("data/metadata.csv") %>%
# Fix Column Name
dplyr::rename("Run" = "...1") %>%
# Add sample names also as a column
mutate(names = sample_names)
# Inspect
head(metadata_df)
# Load packages
pacman::p_load(devtools, phyloseq, dada2, patchwork, Biostrings, tidyverse,
ggpubr, rstatix, install = FALSE)
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
# write figures to the figures folder
fig.path = "../figures/03_PreProcessing/")
# What time did we start running this script?
start_time <- Sys.time()
read_csv("data/metadata.csv")
metadata_df <-
read_csv("data/metadata.csv") %>%
# Fix Column Name
dplyr::rename("Run" = "...1") %>%
# Add sample names also as a column
mutate(names = sample_names)
# load in metadata
metadata_df <-
read_csv("data/metadata.csv") %>%
# Fix Column Name
dplyr::rename("sample_names" = "Run") %>%
# Add sample names also as a column
mutate(names = sample_names)
View(metadata_df)
# Inspect
head(metadata_df)
dim(metadata_df)
# include dada2 output
load("data/01_DADA2/track_read_counts.RData")
# Take a look
glimpse(track_counts_df)
dim(track_counts_df)
# Check filenames
head(track_counts_df$sample_names)
# Fix sample names in track_reads
track_counts_df$sample_names <- sapply(strsplit(track_counts_df$sample_names, "_"), `[`, 1)
# Intuition check
head(track_counts_df$sample_names)
# What's different?
setdiff(track_counts_df$sample_names, metadata_df$sample_names)
# Let's do a filtering join with left_join
metadata_final_df <-
metadata_df %>%
left_join(., track_counts_df, by = "sample_names") %>%
# sample names to the rownames to merge into phyloseq
column_to_rownames(var = "sample_names")
# Let's do a filtering join with left_join
metadata_final_df <-
metadata_df %>%
left_join(., track_counts_df, by = "sample_names") %>%
# sample names to the rownames to merge into phyloseq
column_to_rownames(var = "sample_names")
# Check
dim(metadata_final_df)
View(metadata_final_df)
asv_df <-
read.delim(file = "data/01_DADA2/ASV_table.tsv", sep = "\t",
header = TRUE, row.names = 1)
# Inspect
asv_df[1:3, 1:3]
tax_df <-
read.delim("data/01_DADA2/ASV_taxonomy.tsv", sep = "\t",
header = TRUE, row.names = 1)
# Inspect
dim(tax_df)
dim(asv_df)
# Double checking using code (no human error)
stopifnot(rownames(asv_df) == rownames(tax_df))
raw_physeq <-
phyloseq(otu_table(asv_df, taxa_are_rows = TRUE),
sample_data(metadata_final_df),
tax_table(as.matrix(tax_df)))
# Check out
raw_physeq
# save
save(raw_physeq, file = "data/03_PreProcessing/raw_physeq.RData")
noChloros_physeq <-
raw_physeq %>%
subset_taxa(Order != "Chloroplast" | is.na(Order))
# How many ASVs were chloroplasts?
numChloros_ASVs <- ntaxa(raw_physeq) - ntaxa(noChloros_physeq)
View(noChloros_physeq)
numChloros_ASVs
noChlorosMitos_physeq <-
noChloros_physeq %>%
subset_taxa(Family != "Mitochondria" | is.na(Family))
# How many ASVs were mitochondria?
numMitos_ASVs <- ntaxa(noChloros_physeq) - ntaxa(noChlorosMitos_physeq)
numMitos_ASVs
# Pull out Taxa Table
tax_table <-
noChlorosMitos_physeq %>%
tax_table() %>%
data.frame()
# Grab ASV Sequences and Names
asv_names <- tax_table$ASV
asv_seqs <- tax_table$ASVseqs
# Create empty comparison matrix
asv_rev_comp <- matrix(nrow=length(asv_seqs), ncol = length(asv_seqs))
# Fix the names in the rows and columns
rownames(asv_rev_comp) <- asv_names
colnames(asv_rev_comp) <- asv_names
# Convert sequences to Biostrings
asv_dna <- DNAStringSet(asv_seqs)
# Inspect
head(asv_dna)
# Construct reverse complement
asv_rev_dna <- reverseComplement(asv_dna)
# Now loop through every asv sequence to check
for(i in 1:length(asv_seqs)){ # For each asv sequence...
match_vec <- asv_dna[i] == asv_rev_dna # Compare it to the reverse complement of every other sequence...
asv_rev_comp[,i] <- match_vec # Write that logical vector as a new column
}
# Find how many TRUEs (matches) we have, divide by 2 because each pair occurs twice
cat("For", sum(asv_rev_comp) / 2,"ASVs, the reverse complement will need to be removed")
# The current data object
noChlorosMitos_physeq
# What is the library size/sequencing depth for each sample?
seqSums_df <-
noChlorosMitosNegPosControls_physeq %>%
otu_table() %>%
# Sum each sample column
colSums() %>%
data.frame() %>%
rownames_to_column(var = "names") %>%
left_join(., metadata_final_df, by = "names")
# What is the library size/sequencing depth for each sample?
seqSums_df <-
noChlorosMitos_physeq %>%
otu_table() %>%
# Sum each sample column
colSums() %>%
data.frame() %>%
rownames_to_column(var = "names") %>%
left_join(., metadata_final_df, by = "names")
# Rename second column
colnames(seqSums_df)[2] <- "TotalSeqs"
# check
dim(seqSums_df)
head(seqSums_df)
# Show the depth of samples
seqSums_df %>%
dplyr::select(names, TotalSeqs) %>%
arrange(TotalSeqs) %>%
head()
# plot it as a bar plot
numSeq_bar_plot <-
seqSums_df %>%
ggplot(aes(x=reorder(names, TotalSeqs), y = TotalSeqs,
fill = station)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank()) +
labs(y = "Read Depth", x = "Sample") +
theme(legend.position = "none")
# histogram
numSeq_hist_plot <-
seqSums_df %>%
ggplot(aes(x= TotalSeqs, fill = station)) +
geom_histogram(color = "black") +
labs(y = "# of Samples", x = "Read Depth") +
theme(legend.position = "bottom")
# plot it as a bar plot
numSeq_bar_plot <-
seqSums_df %>%
ggplot(aes(x=reorder(names, TotalSeqs), y = TotalSeqs,
fill = cheese_id)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank()) +
labs(y = "Read Depth", x = "Sample") +
theme(legend.position = "none")
# histogram
numSeq_hist_plot <-
seqSums_df %>%
ggplot(aes(x= TotalSeqs, fill = cheese_id)) +
geom_histogram(color = "black") +
labs(y = "# of Samples", x = "Read Depth") +
theme(legend.position = "bottom")
# Density plot
numSeq_density_plot <-
seqSums_df %>%
ggplot(aes(TotalSeqs, fill = cheese_id)) +
geom_density(alpha = 0.5) +
labs(x = "Read Depth") +
theme(legend.position = "none")
# Put it all together
numSeq_bar_plot + numSeq_hist_plot + numSeq_density_plot +
plot_annotation(tag_levels = "A")
# histogram
numSeq_hist_plot <-
seqSums_df %>%
ggplot(aes(x= TotalSeqs, group = cheese_id)) +
geom_histogram(color = "black") +
labs(y = "# of Samples", x = "Read Depth") +
theme(legend.position = "bottom")
# Density plot
numSeq_density_plot <-
seqSums_df %>%
ggplot(aes(TotalSeqs, fill = cheese_id)) +
geom_density(alpha = 0.5) +
labs(x = "Read Depth") +
theme(legend.position = "none")
# Put it all together
numSeq_bar_plot + numSeq_hist_plot + numSeq_density_plot +
plot_annotation(tag_levels = "A")
# plot it as a bar plot
numSeq_bar_plot <-
seqSums_df %>%
ggplot(aes(x=reorder(names, TotalSeqs), y = TotalSeqs,
group = cheese_id)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank()) +
labs(y = "Read Depth", x = "Sample") +
theme(legend.position = "none")
# histogram
numSeq_hist_plot <-
seqSums_df %>%
ggplot(aes(x= TotalSeqs, group = cheese_id)) +
geom_histogram(color = "black") +
labs(y = "# of Samples", x = "Read Depth") +
theme(legend.position = "bottom")
# Density plot
numSeq_density_plot <-
seqSums_df %>%
ggplot(aes(TotalSeqs, group = cheese_id)) +
geom_density(alpha = 0.5) +
labs(x = "Read Depth") +
theme(legend.position = "none")
# Put it all together
numSeq_bar_plot + numSeq_hist_plot + numSeq_density_plot +
plot_annotation(tag_levels = "A")
# Density plot
numSeq_density_plot <-
seqSums_df %>%
ggplot(aes(TotalSeqs, fill = cheese_id)) +
geom_density(alpha = 0.5) +
labs(x = "Read Depth") +
theme(legend.position = "none")
# Put it all together
numSeq_bar_plot + numSeq_hist_plot + numSeq_density_plot +
plot_annotation(tag_levels = "A")
# plot it as a bar plot
numSeq_bar_plot <-
seqSums_df %>%
ggplot(aes(x=reorder(names, TotalSeqs), y = TotalSeqs,
fill = cheese_id)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank()) +
labs(y = "Read Depth", x = "Sample") +
theme(legend.position = "none")
# histogram
numSeq_hist_plot <-
seqSums_df %>%
ggplot(aes(x= TotalSeqs, fill = cheese_id)) +
geom_histogram(color = "black") +
labs(y = "# of Samples", x = "Read Depth") +
theme(legend.position = "bottom")
# Density plot
numSeq_density_plot <-
seqSums_df %>%
ggplot(aes(TotalSeqs, fill = cheese_id)) +
geom_density(alpha = 0.5) +
labs(x = "Read Depth") +
theme(legend.position = "none")
# Put it all together
numSeq_bar_plot + numSeq_hist_plot + numSeq_density_plot +
plot_annotation(tag_levels = "A")
save(raw_preprocessed_physeq, file = "data/03_PreProcessing/raw_preprocessed_physeq.RData")
#change object name so that it matches Mar's workflow
raw_preprocessed_physeq <-
noChlorosMitos_physeq
save(raw_preprocessed_physeq, file = "data/03_PreProcessing/raw_preprocessed_physeq.RData")
end_time <- Sys.time()
end_time
elapsed_time <- round((end_time - start_time), 3)
elapsed_time
devtools::session_info()
# What time did we start running this script?
start_time <- Sys.time()
set.seed(238438)
# Now load them into the session
pacman::p_load(phytools, ggtree, tidyverse, install = FALSE)
# Load physeq
load("data/03_PreProcessing/raw_preprocessed_physeq.RData")
raw_preprocessed_physeq
# Pull out ASV sequences and ASV names
asv_seq_df <-
raw_preprocessed_physeq@tax_table %>%
data.frame() %>%
dplyr::select(ASV, ASVseqs)
# Add the ">" to make fasta header
asv_seq_df$ASV <- paste0(">", asv_seq_df$ASV)
# Create fasta object
asv_seq_fasta <- c(rbind(asv_seq_df$ASV, asv_seq_df$ASVseqs))
head(asv_seq_fasta)
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
# write figures to the figures folder
fig.path = "../figures/04_PhylogeneticTrees/")
# Create fasta object
asv_seq_fasta <- c(rbind(asv_seq_df$ASV, asv_seq_df$ASVseqs))
head(asv_seq_fasta)
# Write to a fasta file
write(asv_seq_fasta,
file = "data/04_PhylogeneticTree/preprocessed_ASVs.fasta")
# Now, actually run MAFFT
/programs/mafft/bin/mafft --auto data/04_PhylogeneticTree/preprocessed_ASVs.fasta > data/04_PhylogeneticTree/MAFFT_aligned_ASVs.fasta
mkdir -p data/04_PhylogeneticTree
# Ensure reproducibility with package version information
devtools::session_info()
# Take the time now that we are at the end of the script
end_time <- Sys.time()
end_time
# Echo the elapsed time
elapsed_time <- round((end_time - start_time), 3)
elapsed_time
# Ensure reproducibility with package version information
devtools::session_info()
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
# write figures to the figures folder
fig.path = "../figures/04_PhylogeneticTree/")
# What time did we start running this script?
start_time <- Sys.time()
# Any number can be chosen
set.seed(238428)
pacman::p_load(tidyverse, phyloseq, ggtree, phytools, tidytree, phylobase,
install = FALSE)
install("phylobase")
install.packages("phylobase")
pacman::p_load(tidyverse, phyloseq, ggtree, phytools, tidytree, phylobase,
install = FALSE)
# Preprocessed phyloseq object
load("data/03_PreProcessing/raw_preprocessed_physeq.RData")
# Inspect the phyloseq object
raw_preprocessed_physeq
# Load in the tree!
unrooted_tree <- read.tree("data/04_PhylogeneticTree/ASVs_unrooted.tree")
# Take a look at the tree
unrooted_tree
str(unrooted_tree)
# Intuition check
stopifnot(ntaxa(raw_preprocessed_physeq) == ntaxa(unrooted_tree))
# Merge the tree with the phyloseq object
unrooted_physeq <-
merge_phyloseq(raw_preprocessed_physeq, unrooted_tree)
# Let's take a look!
unrooted_physeq
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
# write figures to the figures folder
fig.path = "../figures/04_PhylogeneticTree/",
warning = FALSE)
# Merge the tree with the phyloseq object
unrooted_physeq <-
merge_phyloseq(raw_preprocessed_physeq, unrooted_tree)
# Let's take a look!
unrooted_physeq
# Make a basic tree with the domains
kingdom_tree <-
ggtree(unrooted_physeq) +
# color tips by kingdom
geom_tippoint(mapping = aes(color = Kingdom)) +
# add a title
labs(title = "Unrooted Tree") +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey")) +
# Move the legend to the bottom of the tree
theme(legend.position = "bottom")
# Look at it
kingdom_tree
# Check if tree is rooted
is.rooted(unrooted_tree) # should be TRUE
kingdom_node_tree <-
kingdom_tree +
# Add the node label
geom_text(aes(label=node), hjust= -0.5, vjust = -0.3, size = 2)
# Plot the tree
kingdom_node_tree
# View a specific clade
# Zoom in on node that looks potentially suspicious
viewClade(kingdom_node_tree +
labs(title = "Kingdom Tree: Node 66"),
node = 66)
# This plot is too zoomed in! Let's try to zoom out by looking at ancestors
# Lets see its ancestors, which will tell us each node as it steps up.
# It's ideal to look a couple nodes up but not too far!
tidytree::ancestor(unrooted_tree, 66) # The input is the TREE, not phyloseq!!
# Let's evaluate 162!
viewClade(kingdom_node_tree, 162)
# Plot the tree
kingdom_node_tree
# Or if there are two nodes that we can see we can find its MRCA
## let's do 66 and 67 for the purpose of getting some extra practice on
## create tibble of tree to identify offspring
tree_tib <- as_tibble(unrooted_physeq@phy_tree)
# Inspect
head(tree_tib)
str(tree_tib)
# lets look at the long branch
mrca_node_66 <- tidytree::MRCA(unrooted_tree, .node1 = 66, .node2 = 67)
# Inspect
mrca_node_66
# Inspect
mrca_node_66
## create dataframe to view ASVs and taxa info and to pull the ASVs
node_162 <-
offspring(tree_tib, mrca_node_66, tiponly = TRUE) %>%
as.data.frame() %>%
pull(label)
# Inspect
node_162
# Now, let's pull out the taxonomy information, including the ASV sequence!
node_162_df <-
unrooted_physeq %>%
tax_table() %>%
as.data.frame() %>%
filter(ASV %in% node_162)
# Take a look:
glimpse(node_162_df)
# look at counts of the ASVs
unrooted_physeq %>%
subset_taxa(., ASV %in% node_162_df$ASV) %>%
otu_table() %>%
data.frame() %>%
colSums()
# Lets BLAST our sequences to investigate if they are real or not
node_162_df
return(prune_taxa(allTaxa, physeq))}
return(prune_taxa(allTaxa, physeq))}
return(prune_taxa(allTaxa, physeq))}
pop_taxa = function(physeq, badTaxa) {
allTaxa <- taxa_names(physeq)
allTaxa <- allTaxa[!(allTaxa %in% badTaxa)]
return(prune_taxa(allTaxa, physeq))
}
# Check to see if tree is rooted.. expect it to be false
is.rooted(phy_tree(unrooted_physeq))
# Let's midpoint root the tree
midpoint_rooted_tree <-
unrooted_physeq %>%
phy_tree() %>%
phytools::midpoint.root()
# Is the new tree rooted? Should be TRUE!
is.rooted(midpoint_rooted_tree)
# Assign to a new phyloseq object!
# Merge tree with the raw_preprocessed physeq
midpoint_rooted_physeq <-
merge_phyloseq(raw_preprocessed_physeq, midpoint_rooted_tree)
# Quick inspection of tree
midpoint_rooted_tree_plot <-
ggtree(midpoint_rooted_physeq) +
geom_tippoint(mapping = aes(color = Kingdom)) +
geom_tippoint(aes(color = Kingdom)) +
labs(title = "Midpoint Rooted Tree") +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# Look at the tree
midpoint_rooted_tree_plot
# Add nodes
midpoint_rooted_tree_node_plot <-
midpoint_rooted_tree_plot +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5)
# View it
midpoint_rooted_tree_node_plot
# Take a quick look at the two!
midpoint_rooted_physeq # Midpiont rooted tree
# Save both phyloseq objects to one .RData file
save(list = c("midpoint_rooted_physeq"),
file = "data/04_PhylogeneticTree/phytree_preprocessed_physeqs.RData")
# Save both phyloseq objects to one .RData file
save(midpoint_rooted_physeq,
file = "data/04_PhylogeneticTree/midpoint_rooted_physeq.RData")
# Take the time now that we are at the end of the script
end_time <- Sys.time()
end_time
# Echo the elapsed time
elapsed_time <- round((end_time - start_time), 3)
elapsed_time
# Ensure reproducibility with package version information
devtools::session_info()
# View it
midpoint_rooted_tree_node_plot
save(midpoint_rooted_tree_node_plot,
file = "data/04_PhylogeneticTree/midpoint_rooted_tree_node_plot.png")
save(midpoint_rooted_tree_node_plot,
file = "figures/04_PhylogeneticTree/midpoint_rooted_tree_node_plot.png")
# Look at it
kingdom_tree
There is one oddly long branch that I think we should investigate. It sticks out quite further than any other branch and it's shared root node is very far away from it.
